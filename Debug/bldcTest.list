
bldcTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003880  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003880  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e051  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206a  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00030140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b5  00000000  00000000  00030db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd64  00000000  00000000  00031765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003b0f  00000000  00000000  0003d4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003348  00000000  00000000  00040fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000061  00000000  00000000  00044320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800381c 	.word	0x0800381c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800381c 	.word	0x0800381c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <MX_GPIO_Init+0xc0>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a29      	ldr	r2, [pc, #164]	; (8000288 <MX_GPIO_Init+0xc0>)
 80001e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b27      	ldr	r3, [pc, #156]	; (8000288 <MX_GPIO_Init+0xc0>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	4b24      	ldr	r3, [pc, #144]	; (8000288 <MX_GPIO_Init+0xc0>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a23      	ldr	r2, [pc, #140]	; (8000288 <MX_GPIO_Init+0xc0>)
 80001fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_GPIO_Init+0xc0>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRVRESET_Pin|EN_U_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f000 fda2 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_W_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2118      	movs	r1, #24
 8000220:	481a      	ldr	r0, [pc, #104]	; (800028c <MX_GPIO_Init+0xc4>)
 8000222:	f000 fd9d 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HALL_U_Pin|HALL_V_Pin|HALL_W_Pin;
 8000226:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800022a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800022c:	2300      	movs	r3, #0
 800022e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	4619      	mov	r1, r3
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f000 fc05 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DRVRESET_Pin|EN_U_Pin;
 8000242:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	2301      	movs	r3, #1
 800024a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000254:	f107 030c 	add.w	r3, r7, #12
 8000258:	4619      	mov	r1, r3
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f000 fbf5 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_W_Pin;
 8000262:	2318      	movs	r3, #24
 8000264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	2301      	movs	r3, #1
 8000268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	4619      	mov	r1, r3
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_GPIO_Init+0xc4>)
 800027a:	f000 fbe7 	bl	8000a4c <HAL_GPIO_Init>

}
 800027e:	bf00      	nop
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	48000400 	.word	0x48000400

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fa69 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f82b 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f7ff ff93 	bl	80001c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a2:	f000 f8e3 	bl	800046c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 f9a3 	bl	80005f0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t hallValue[3];
  while (1)
  {
	  hallValue[0] = HAL_GPIO_ReadPin(GPIOA, HALL_U_Pin);
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f000 fd3d 	bl	8000d30 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	713b      	strb	r3, [r7, #4]
	  hallValue[1] = HAL_GPIO_ReadPin(GPIOA, HALL_V_Pin);
 80002ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f000 fd35 	bl	8000d30 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	717b      	strb	r3, [r7, #5]
	  hallValue[2] =HAL_GPIO_ReadPin(GPIOA, HALL_W_Pin);
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f000 fd2d 	bl	8000d30 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Transmit(&huart1, &hallValue, sizeof(hallValue), HAL_MAX_DELAY);
 80002da:	1d39      	adds	r1, r7, #4
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002e0:	2203      	movs	r2, #3
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <main+0x60>)
 80002e4:	f002 fe32 	bl	8002f4c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80002e8:	2064      	movs	r0, #100	; 0x64
 80002ea:	f000 faa5 	bl	8000838 <HAL_Delay>
	  hallValue[0] = HAL_GPIO_ReadPin(GPIOA, HALL_U_Pin);
 80002ee:	e7dc      	b.n	80002aa <main+0x1a>
 80002f0:	20000074 	.word	0x20000074

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09c      	sub	sp, #112	; 0x70
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fa5e 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2230      	movs	r2, #48	; 0x30
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fa50 	bl	80037c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000334:	2300      	movs	r3, #0
 8000336:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000338:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800033c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fd24 	bl	8000d90 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800034e:	f000 f827 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fd4c 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800037a:	f000 f811 	bl	80003a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f001 ff75 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000394:	f000 f804 	bl	80003a0 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3770      	adds	r7, #112	; 0x70
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
}
 80003a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <Error_Handler+0x8>
	...

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x44>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x44>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x44>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_MspInit+0x44>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_MspInit+0x44>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_MspInit+0x44>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f9da 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <SystemInit+0x20>)
 800044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <SystemInit+0x20>)
 8000454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000472:	f107 031c 	add.w	r3, r7, #28
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]
 800048e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_TIM2_Init+0xdc>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <MX_TIM2_Init+0xdc>)
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b26      	ldr	r3, [pc, #152]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b2:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b8:	4823      	ldr	r0, [pc, #140]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004ba:	f002 f861 	bl	8002580 <HAL_TIM_PWM_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f7ff ff6c 	bl	80003a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	4619      	mov	r1, r3
 80004d6:	481c      	ldr	r0, [pc, #112]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004d8:	f002 fcd2 	bl	8002e80 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80004e2:	f7ff ff5d 	bl	80003a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_TIM2_Init+0xdc>)
 80004fe:	f002 f897 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000508:	f7ff ff4a 	bl	80003a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	2204      	movs	r2, #4
 8000510:	4619      	mov	r1, r3
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <MX_TIM2_Init+0xdc>)
 8000514:	f002 f88c 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800051e:	f7ff ff3f 	bl	80003a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	2208      	movs	r2, #8
 8000526:	4619      	mov	r1, r3
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <MX_TIM2_Init+0xdc>)
 800052a:	f002 f881 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000534:	f7ff ff34 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <MX_TIM2_Init+0xdc>)
 800053a:	f000 f825 	bl	8000588 <HAL_TIM_MspPostInit>

}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	; 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028

0800054c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800055c:	d10b      	bne.n	8000576 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_TIM_PWM_MspInit+0x38>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_TIM_PWM_MspInit+0x38>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_TIM_PWM_MspInit+0x38>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a8:	d11c      	bne.n	80005e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_TIM_MspPostInit+0x64>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <HAL_TIM_MspPostInit+0x64>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_TIM_MspPostInit+0x64>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin|PWM_W_Pin;
 80005c2:	2307      	movs	r3, #7
 80005c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fa34 	bl	8000a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_USART1_UART_Init+0x5c>)
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <MX_USART1_UART_Init+0x60>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART1_UART_Init+0x5c>)
 80005fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x5c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART1_UART_Init+0x5c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART1_UART_Init+0x5c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_USART1_UART_Init+0x5c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART1_UART_Init+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_USART1_UART_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART1_UART_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_USART1_UART_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_USART1_UART_Init+0x5c>)
 800063a:	f003 f85c 	bl	80036f6 <HAL_RS485Ex_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000644:	f7ff feac 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000074 	.word	0x20000074
 8000650:	40013800 	.word	0x40013800

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <HAL_UART_MspInit+0xb8>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d145      	bne.n	8000702 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <HAL_UART_MspInit+0xbc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a25      	ldr	r2, [pc, #148]	; (8000710 <HAL_UART_MspInit+0xbc>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <HAL_UART_MspInit+0xbc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <HAL_UART_MspInit+0xbc>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <HAL_UART_MspInit+0xbc>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <HAL_UART_MspInit+0xbc>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_UART_MspInit+0xbc>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_UART_MspInit+0xbc>)
 80006ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_UART_MspInit+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006d0:	2307      	movs	r3, #7
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f000 f9b5 	bl	8000a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006e2:	23c0      	movs	r3, #192	; 0xc0
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006f2:	2307      	movs	r3, #7
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_UART_MspInit+0xc0>)
 80006fe:	f000 f9a5 	bl	8000a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400

08000718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000750 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff fe94 	bl	8000448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f003 f845 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074a:	f7ff fda1 	bl	8000290 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000750:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	08003874 	.word	0x08003874
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	20000100 	.word	0x20000100

08000768 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f931 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f808 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fe10 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x54>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f93b 	bl	8000a32 <HAL_SYSTICK_Config>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00e      	b.n	80007e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d80a      	bhi.n	80007e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d4:	f000 f911 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_InitTick+0x5c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	200000fc 	.word	0x200000fc

08000820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;  
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200000fc 	.word	0x200000fc

08000838 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffde 	bl	8000820 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff47 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff5c 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff8e 	bl	8000938 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5d 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffb0 	bl	80009a0 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e14e      	b.n	8000cfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8140 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x40>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 809a 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d013      	beq.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a46      	ldr	r2, [pc, #280]	; (8000d20 <HAL_GPIO_Init+0x2d4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <HAL_GPIO_Init+0x1dc>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x1d8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_GPIO_Init+0x1d4>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f aea9 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e001      	b.n	8000d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d70:	787b      	ldrb	r3, [r7, #1]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f001 b823 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 817d 	beq.w	80010c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dcc:	4bbc      	ldr	r3, [pc, #752]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d00c      	beq.n	8000df2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd8:	4bb9      	ldr	r3, [pc, #740]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d15c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x10e>
 8000de4:	4bb6      	ldr	r3, [pc, #728]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d155      	bne.n	8000e9e <HAL_RCC_OscConfig+0x10e>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_OscConfig+0x94>
 8000e1e:	4ba8      	ldr	r3, [pc, #672]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e015      	b.n	8000e50 <HAL_RCC_OscConfig+0xc0>
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e4c:	4b9c      	ldr	r3, [pc, #624]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e5c:	fa92 f2a2 	rbit	r2, r2
 8000e60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e68:	fab2 f282 	clz	r2, r2
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	f002 021f 	and.w	r2, r2, #31
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 811f 	beq.w	80010c4 <HAL_RCC_OscConfig+0x334>
 8000e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f040 8116 	bne.w	80010c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f000 bfaf 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eae:	d106      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12e>
 8000eb0:	4b83      	ldr	r3, [pc, #524]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a82      	ldr	r2, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e036      	b.n	8000f2c <HAL_RCC_OscConfig+0x19c>
 8000ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x158>
 8000ece:	4b7c      	ldr	r3, [pc, #496]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7b      	ldr	r2, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b79      	ldr	r3, [pc, #484]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a78      	ldr	r2, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e021      	b.n	8000f2c <HAL_RCC_OscConfig+0x19c>
 8000ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x184>
 8000efa:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a70      	ldr	r2, [pc, #448]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6d      	ldr	r2, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e00b      	b.n	8000f2c <HAL_RCC_OscConfig+0x19c>
 8000f14:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a69      	ldr	r2, [pc, #420]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a66      	ldr	r2, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f2c:	4b64      	ldr	r3, [pc, #400]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	f023 020f 	bic.w	r2, r3, #15
 8000f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	495f      	ldr	r1, [pc, #380]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d059      	beq.n	800100a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fc63 	bl	8000820 <HAL_GetTick>
 8000f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	e00a      	b.n	8000f76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fc5e 	bl	8000820 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	; 0x64
 8000f6e:	d902      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f000 bf43 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	095b      	lsrs	r3, r3, #5
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x218>
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	e015      	b.n	8000fd4 <HAL_RCC_OscConfig+0x244>
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fdc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fe0:	fa92 f2a2 	rbit	r2, r2
 8000fe4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fe8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fec:	fab2 f282 	clz	r2, r2
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	f042 0220 	orr.w	r2, r2, #32
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	f002 021f 	and.w	r2, r2, #31
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0ab      	beq.n	8000f60 <HAL_RCC_OscConfig+0x1d0>
 8001008:	e05d      	b.n	80010c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc09 	bl	8000820 <HAL_GetTick>
 800100e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	e00a      	b.n	800102a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fc04 	bl	8000820 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	d902      	bls.n	800102a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	f000 bee9 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800103e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <HAL_RCC_OscConfig+0x2cc>
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e015      	b.n	8001088 <HAL_RCC_OscConfig+0x2f8>
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001074:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001078:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800108c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001090:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001094:	fa92 f2a2 	rbit	r2, r2
 8001098:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800109c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f002 021f 	and.w	r2, r2, #31
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1ab      	bne.n	8001014 <HAL_RCC_OscConfig+0x284>
 80010bc:	e003      	b.n	80010c6 <HAL_RCC_OscConfig+0x336>
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 817d 	beq.w	80013d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010dc:	4ba6      	ldr	r3, [pc, #664]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e8:	4ba3      	ldr	r3, [pc, #652]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d172      	bne.n	80011da <HAL_RCC_OscConfig+0x44a>
 80010f4:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d16c      	bne.n	80011da <HAL_RCC_OscConfig+0x44a>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001112:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	095b      	lsrs	r3, r3, #5
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x3a0>
 800112a:	4b93      	ldr	r3, [pc, #588]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	e013      	b.n	8001158 <HAL_RCC_OscConfig+0x3c8>
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001148:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001154:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	2202      	movs	r2, #2
 800115a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800115e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001162:	fa92 f2a2 	rbit	r2, r2
 8001166:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800116a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800116e:	fab2 f282 	clz	r2, r2
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	f042 0220 	orr.w	r2, r2, #32
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f002 021f 	and.w	r2, r2, #31
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00a      	beq.n	80011a0 <HAL_RCC_OscConfig+0x410>
 800118a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d002      	beq.n	80011a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 be2e 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b75      	ldr	r3, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	21f8      	movs	r1, #248	; 0xf8
 80011b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011be:	fa91 f1a1 	rbit	r1, r1
 80011c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011ca:	fab1 f181 	clz	r1, r1
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	408b      	lsls	r3, r1
 80011d2:	4969      	ldr	r1, [pc, #420]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d8:	e0fd      	b.n	80013d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8088 	beq.w	80012fc <HAL_RCC_OscConfig+0x56c>
 80011ec:	2301      	movs	r3, #1
 80011ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800120c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	461a      	mov	r2, r3
 8001214:	2301      	movs	r3, #1
 8001216:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fb02 	bl	8000820 <HAL_GetTick>
 800121c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fafd 	bl	8000820 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d902      	bls.n	8001238 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	f000 bde2 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800124a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d102      	bne.n	8001268 <HAL_RCC_OscConfig+0x4d8>
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e013      	b.n	8001290 <HAL_RCC_OscConfig+0x500>
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001280:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2202      	movs	r2, #2
 8001292:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001296:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800129a:	fa92 f2a2 	rbit	r2, r2
 800129e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012a6:	fab2 f282 	clz	r2, r2
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f042 0220 	orr.w	r2, r2, #32
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	f002 021f 	and.w	r2, r2, #31
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0af      	beq.n	8001222 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	21f8      	movs	r1, #248	; 0xf8
 80012d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012e0:	fa91 f1a1 	rbit	r1, r1
 80012e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012ec:	fab1 f181 	clz	r1, r1
 80012f0:	b2c9      	uxtb	r1, r1
 80012f2:	408b      	lsls	r3, r1
 80012f4:	4920      	ldr	r1, [pc, #128]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
 80012fa:	e06c      	b.n	80013d6 <HAL_RCC_OscConfig+0x646>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800130e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800131c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	461a      	mov	r2, r3
 8001324:	2300      	movs	r3, #0
 8001326:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fa7a 	bl	8000820 <HAL_GetTick>
 800132c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fa75 	bl	8000820 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d902      	bls.n	8001348 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	f000 bd5a 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800135a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d104      	bne.n	800137c <HAL_RCC_OscConfig+0x5ec>
 8001372:	4b01      	ldr	r3, [pc, #4]	; (8001378 <HAL_RCC_OscConfig+0x5e8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	e015      	b.n	80013a4 <HAL_RCC_OscConfig+0x614>
 8001378:	40021000 	.word	0x40021000
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001394:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013a0:	4bc8      	ldr	r3, [pc, #800]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2202      	movs	r2, #2
 80013a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013ae:	fa92 f2a2 	rbit	r2, r2
 80013b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013ba:	fab2 f282 	clz	r2, r2
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f042 0220 	orr.w	r2, r2, #32
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f002 021f 	and.w	r2, r2, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ad      	bne.n	8001332 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8110 	beq.w	800160c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d079      	beq.n	80014f0 <HAL_RCC_OscConfig+0x760>
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800140e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4bab      	ldr	r3, [pc, #684]	; (80016c8 <HAL_RCC_OscConfig+0x938>)
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	2301      	movs	r3, #1
 8001424:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff f9fb 	bl	8000820 <HAL_GetTick>
 800142a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff f9f6 	bl	8000820 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d902      	bls.n	8001446 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	f000 bcdb 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f2a3 	rbit	r2, r3
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800149e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 80014a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014ac:	2102      	movs	r1, #2
 80014ae:	6019      	str	r1, [r3, #0]
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f1a3 	rbit	r1, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c6:	6019      	str	r1, [r3, #0]
  return result;
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0a0      	beq.n	8001430 <HAL_RCC_OscConfig+0x6a0>
 80014ee:	e08d      	b.n	800160c <HAL_RCC_OscConfig+0x87c>
 80014f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001512:	601a      	str	r2, [r3, #0]
  return result;
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800151c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x938>)
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	461a      	mov	r2, r3
 800152e:	2300      	movs	r3, #0
 8001530:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f975 	bl	8000820 <HAL_GetTick>
 8001536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff f970 	bl	8000820 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d902      	bls.n	8001552 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	f000 bc55 	b.w	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800155a:	2202      	movs	r2, #2
 800155c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fa93 f2a3 	rbit	r2, r3
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015a2:	2202      	movs	r2, #2
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 80015c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ca:	2102      	movs	r1, #2
 80015cc:	6019      	str	r1, [r3, #0]
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f1a3 	rbit	r1, r3
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015e4:	6019      	str	r1, [r3, #0]
  return result;
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d197      	bne.n	800153c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 81a1 	beq.w	8001964 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d116      	bne.n	8001662 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	61d3      	str	r3, [r2, #28]
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800165a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_RCC_OscConfig+0x93c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_RCC_OscConfig+0x93c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_RCC_OscConfig+0x93c>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff f8d1 	bl	8000820 <HAL_GetTick>
 800167e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	e009      	b.n	8001698 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff f8cc 	bl	8000820 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e3b1      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_RCC_OscConfig+0x93c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ef      	beq.n	8001684 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_OscConfig+0x940>
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a02      	ldr	r2, [pc, #8]	; (80016c4 <HAL_RCC_OscConfig+0x934>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e03c      	b.n	800173c <HAL_RCC_OscConfig+0x9ac>
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	10908120 	.word	0x10908120
 80016cc:	40007000 	.word	0x40007000
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x96a>
 80016e0:	4bc1      	ldr	r3, [pc, #772]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4ac0      	ldr	r2, [pc, #768]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	4bbe      	ldr	r3, [pc, #760]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4abd      	ldr	r2, [pc, #756]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e020      	b.n	800173c <HAL_RCC_OscConfig+0x9ac>
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x994>
 800170a:	4bb7      	ldr	r3, [pc, #732]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4ab6      	ldr	r2, [pc, #728]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4bb4      	ldr	r3, [pc, #720]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4ab3      	ldr	r2, [pc, #716]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x9ac>
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4aaf      	ldr	r2, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	4bad      	ldr	r3, [pc, #692]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4aac      	ldr	r2, [pc, #688]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8081 	beq.w	8001850 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff f867 	bl	8000820 <HAL_GetTick>
 8001752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff f862 	bl	8000820 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e345      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017b6:	601a      	str	r2, [r3, #0]
  return result;
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0xa4c>
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0xa74>
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	fa93 f2a3 	rbit	r2, r3
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001808:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800180c:	2102      	movs	r1, #2
 800180e:	6011      	str	r1, [r2, #0]
 8001810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001814:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	fa92 f1a2 	rbit	r1, r2
 800181e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001822:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001826:	6011      	str	r1, [r2, #0]
  return result;
 8001828:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800182c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f002 021f 	and.w	r2, r2, #31
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d084      	beq.n	8001758 <HAL_RCC_OscConfig+0x9c8>
 800184e:	e07f      	b.n	8001950 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7fe ffe6 	bl	8000820 <HAL_GetTick>
 8001854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7fe ffe1 	bl	8000820 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e2c4      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018b8:	601a      	str	r2, [r3, #0]
  return result;
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0xb4e>
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	e013      	b.n	8001906 <HAL_RCC_OscConfig+0xb76>
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018e6:	2202      	movs	r2, #2
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800190e:	2102      	movs	r1, #2
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001916:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fa92 f1a2 	rbit	r1, r2
 8001920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001924:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001928:	6011      	str	r1, [r2, #0]
  return result;
 800192a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f002 021f 	and.w	r2, r2, #31
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d184      	bne.n	800185a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001950:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8242 	beq.w	8001dfa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_RCC_OscConfig+0xc58>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	f000 8213 	beq.w	8001daa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	f040 8162 	bne.w	8001c5a <HAL_RCC_OscConfig+0xeca>
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800199e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	461a      	mov	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7fe ff20 	bl	8000820 <HAL_GetTick>
 80019e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	e00c      	b.n	8001a00 <HAL_RCC_OscConfig+0xc70>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7fe ff18 	bl	8000820 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1fd      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a24:	601a      	str	r2, [r3, #0]
  return result;
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_OscConfig+0xcba>
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e027      	b.n	8001a9a <HAL_RCC_OscConfig+0xd0a>
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4b9c      	ldr	r3, [pc, #624]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001aa2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aa6:	6011      	str	r1, [r2, #0]
 8001aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	fa92 f1a2 	rbit	r1, r2
 8001ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001abe:	6011      	str	r1, [r2, #0]
  return result;
 8001ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	fab2 f282 	clz	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d182      	bne.n	80019ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	497f      	ldr	r1, [pc, #508]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b32:	601a      	str	r2, [r3, #0]
  return result;
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe fe64 	bl	8000820 <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	e009      	b.n	8001b72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe fe5f 	bl	8000820 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e144      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b96:	601a      	str	r2, [r3, #0]
  return result;
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ba0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0xe2c>
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e027      	b.n	8001c0c <HAL_RCC_OscConfig+0xe7c>
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c18:	6011      	str	r1, [r2, #0]
 8001c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	fa92 f1a2 	rbit	r1, r2
 8001c28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c30:	6011      	str	r1, [r2, #0]
  return result;
 8001c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d082      	beq.n	8001b5e <HAL_RCC_OscConfig+0xdce>
 8001c58:	e0cf      	b.n	8001dfa <HAL_RCC_OscConfig+0x106a>
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c7e:	601a      	str	r2, [r3, #0]
  return result;
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fdbe 	bl	8000820 <HAL_GetTick>
 8001ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fdb9 	bl	8000820 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e09e      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ce2:	601a      	str	r2, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d104      	bne.n	8001d0c <HAL_RCC_OscConfig+0xf7c>
 8001d02:	4b01      	ldr	r3, [pc, #4]	; (8001d08 <HAL_RCC_OscConfig+0xf78>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e029      	b.n	8001d5c <HAL_RCC_OscConfig+0xfcc>
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x1078>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d68:	6011      	str	r1, [r2, #0]
 8001d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	fa92 f1a2 	rbit	r1, r2
 8001d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d80:	6011      	str	r1, [r2, #0]
  return result;
 8001d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d180      	bne.n	8001caa <HAL_RCC_OscConfig+0xf1a>
 8001da8:	e027      	b.n	8001dfa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e01e      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x1078>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b09e      	sub	sp, #120	; 0x78
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e162      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b90      	ldr	r3, [pc, #576]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b8d      	ldr	r3, [pc, #564]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	498b      	ldr	r1, [pc, #556]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e14a      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b82      	ldr	r3, [pc, #520]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	497f      	ldr	r1, [pc, #508]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80dc 	beq.w	8002038 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d13c      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xf6>
 8001e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xa6>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e00f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0xc6>
 8001eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ed6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d17b      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0f3      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d13c      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x178>
 8001f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x128>
 8001f2e:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e00f      	b.n	8001f54 <HAL_RCC_ClockConfig+0x148>
 8001f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
 8001f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f5c:	fa92 f2a2 	rbit	r2, r2
 8001f60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13a      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b2      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1a0>
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1bc>
 8001fac:	2302      	movs	r3, #2
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	61ba      	str	r2, [r7, #24]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	fa92 f2a2 	rbit	r2, r2
 8001fd2:	617a      	str	r2, [r7, #20]
  return result;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f002 021f 	and.w	r2, r2, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e079      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	491a      	ldr	r1, [pc, #104]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe fc0a 	bl	8000820 <HAL_GetTick>
 800200c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fc06 	bl	8000820 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e061      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d214      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4906      	ldr	r1, [pc, #24]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e040      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	491a      	ldr	r1, [pc, #104]	; (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4912      	ldr	r1, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ae:	f000 f829 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	22f0      	movs	r2, #240	; 0xf0
 80020be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	60fa      	str	r2, [r7, #12]
  return result;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	40d3      	lsrs	r3, r2
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x2ec>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	fa21 f303 	lsr.w	r3, r1, r3
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_RCC_ClockConfig+0x2f0>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_RCC_ClockConfig+0x2f4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fb58 	bl	8000798 <HAL_InitTick>
  
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3778      	adds	r7, #120	; 0x78
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003834 	.word	0x08003834
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b08b      	sub	sp, #44	; 0x2c
 8002108:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e03c      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002136:	623b      	str	r3, [r7, #32]
      break;
 8002138:	e03c      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002140:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002144:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	fa92 f2a2 	rbit	r2, r2
 800214c:	607a      	str	r2, [r7, #4]
  return result;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	40d3      	lsrs	r3, r2
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	220f      	movs	r2, #15
 8002168:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	60fa      	str	r2, [r7, #12]
  return result;
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e004      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	623b      	str	r3, [r7, #32]
      break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b0:	623b      	str	r3, [r7, #32]
      break;
 80021b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b4:	6a3b      	ldr	r3, [r7, #32]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	372c      	adds	r7, #44	; 0x2c
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	0800384c 	.word	0x0800384c
 80021d0:	0800385c 	.word	0x0800385c
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021f6:	f7ff ffef 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002204:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002208:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	fa92 f2a2 	rbit	r2, r2
 8002210:	603a      	str	r2, [r7, #0]
  return result;
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	40d3      	lsrs	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x40>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08003844 	.word	0x08003844

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800223a:	f7ff ffcd 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800223e:	4601      	mov	r1, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002248:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800224c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	603a      	str	r2, [r7, #0]
  return result;
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	40d3      	lsrs	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	08003844 	.word	0x08003844

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b092      	sub	sp, #72	; 0x48
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80d4 	beq.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229c:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	61d3      	str	r3, [r2, #28]
 80022b4:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b42      	ldr	r3, [pc, #264]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a41      	ldr	r2, [pc, #260]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fa9f 	bl	8000820 <HAL_GetTick>
 80022e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fa9b 	bl	8000820 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e13c      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8084 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002320:	429a      	cmp	r2, r3
 8002322:	d07c      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	461a      	mov	r2, r3
 800234e:	2301      	movs	r3, #1
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04b      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fa4b 	bl	8000820 <HAL_GetTick>
 800238a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fa47 	bl	8000820 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0e6      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	2302      	movs	r3, #2
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	61fb      	str	r3, [r7, #28]
  return result;
 80023bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d108      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023d2:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	e00d      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	10908100 	.word	0x10908100
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2202      	movs	r2, #2
 80023f6:	613a      	str	r2, [r7, #16]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f002 021f 	and.w	r2, r2, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0b7      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4954      	ldr	r1, [pc, #336]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800242c:	4313      	orrs	r3, r2
 800242e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800243e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002442:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4947      	ldr	r1, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800245e:	4313      	orrs	r3, r2
 8002460:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f023 0210 	bic.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4940      	ldr	r1, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f023 0220 	bic.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4938      	ldr	r1, [pc, #224]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4931      	ldr	r1, [pc, #196]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4929      	ldr	r1, [pc, #164]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80024e6:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	491a      	ldr	r1, [pc, #104]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002512:	4313      	orrs	r3, r2
 8002514:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	4913      	ldr	r1, [pc, #76]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	490b      	ldr	r1, [pc, #44]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800256c:	4313      	orrs	r3, r2
 800256e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3748      	adds	r7, #72	; 0x48
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e049      	b.n	8002626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fd ffd0 	bl	800054c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 f94a 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800264a:	2302      	movs	r3, #2
 800264c:	e0ff      	b.n	800284e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b14      	cmp	r3, #20
 800265a:	f200 80f0 	bhi.w	800283e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	080026b9 	.word	0x080026b9
 8002668:	0800283f 	.word	0x0800283f
 800266c:	0800283f 	.word	0x0800283f
 8002670:	0800283f 	.word	0x0800283f
 8002674:	080026f9 	.word	0x080026f9
 8002678:	0800283f 	.word	0x0800283f
 800267c:	0800283f 	.word	0x0800283f
 8002680:	0800283f 	.word	0x0800283f
 8002684:	0800273b 	.word	0x0800273b
 8002688:	0800283f 	.word	0x0800283f
 800268c:	0800283f 	.word	0x0800283f
 8002690:	0800283f 	.word	0x0800283f
 8002694:	0800277b 	.word	0x0800277b
 8002698:	0800283f 	.word	0x0800283f
 800269c:	0800283f 	.word	0x0800283f
 80026a0:	0800283f 	.word	0x0800283f
 80026a4:	080027bd 	.word	0x080027bd
 80026a8:	0800283f 	.word	0x0800283f
 80026ac:	0800283f 	.word	0x0800283f
 80026b0:	0800283f 	.word	0x0800283f
 80026b4:	080027fd 	.word	0x080027fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f938 	bl	8002934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
      break;
 80026f6:	e0a5      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f99e 	bl	8002a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e084      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f9fd 	bl	8002b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      break;
 8002778:	e064      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fa5b 	bl	8002c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	61da      	str	r2, [r3, #28]
      break;
 80027ba:	e043      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fa9e 	bl	8002d04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0208 	orr.w	r2, r2, #8
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027fa:	e023      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fadc 	bl	8002dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	021a      	lsls	r2, r3, #8
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800283c:	e002      	b.n	8002844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
      break;
 8002842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800284c:	7dfb      	ldrb	r3, [r7, #23]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a2e      	ldr	r2, [pc, #184]	; (8002924 <TIM_Base_SetConfig+0xcc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <TIM_Base_SetConfig+0x20>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d108      	bne.n	800288a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <TIM_Base_SetConfig+0xcc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <TIM_Base_SetConfig+0x5a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0x5a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <TIM_Base_SetConfig+0xd0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x5a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <TIM_Base_SetConfig+0xd4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x5a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a20      	ldr	r2, [pc, #128]	; (8002930 <TIM_Base_SetConfig+0xd8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <TIM_Base_SetConfig+0xcc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <TIM_Base_SetConfig+0xd0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0xb0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <TIM_Base_SetConfig+0xd4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <TIM_Base_SetConfig+0xd8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40014000 	.word	0x40014000
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800

08002934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0201 	bic.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <TIM_OC1_SetConfig+0xfc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_OC1_SetConfig+0x78>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <TIM_OC1_SetConfig+0x100>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_OC1_SetConfig+0x78>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <TIM_OC1_SetConfig+0x104>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_OC1_SetConfig+0x78>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <TIM_OC1_SetConfig+0x108>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10c      	bne.n	80029c6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0308 	bic.w	r3, r3, #8
 80029b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <TIM_OC1_SetConfig+0xfc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_OC1_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <TIM_OC1_SetConfig+0x100>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_OC1_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <TIM_OC1_SetConfig+0x104>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_OC1_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <TIM_OC1_SetConfig+0x108>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800

08002a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0210 	bic.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0320 	bic.w	r3, r3, #32
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <TIM_OC2_SetConfig+0xf0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10d      	bne.n	8002ac0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <TIM_OC2_SetConfig+0xf0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xa0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <TIM_OC2_SetConfig+0xf4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xa0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <TIM_OC2_SetConfig+0xf8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xa0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <TIM_OC2_SetConfig+0xfc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d113      	bne.n	8002b08 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40014400 	.word	0x40014400
 8002b3c:	40014800 	.word	0x40014800

08002b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <TIM_OC3_SetConfig+0xec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <TIM_OC3_SetConfig+0xec>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <TIM_OC3_SetConfig+0x9e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <TIM_OC3_SetConfig+0xf0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <TIM_OC3_SetConfig+0x9e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <TIM_OC3_SetConfig+0xf4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_OC3_SetConfig+0x9e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <TIM_OC3_SetConfig+0xf8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40014400 	.word	0x40014400
 8002c38:	40014800 	.word	0x40014800

08002c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	031b      	lsls	r3, r3, #12
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <TIM_OC4_SetConfig+0xb8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_OC4_SetConfig+0x7c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <TIM_OC4_SetConfig+0xbc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_OC4_SetConfig+0x7c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <TIM_OC4_SetConfig+0xc0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_OC4_SetConfig+0x7c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <TIM_OC4_SetConfig+0xc4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d109      	bne.n	8002ccc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800

08002d04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <TIM_OC5_SetConfig+0xac>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_OC5_SetConfig+0x72>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <TIM_OC5_SetConfig+0xb0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_OC5_SetConfig+0x72>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <TIM_OC5_SetConfig+0xb4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_OC5_SetConfig+0x72>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <TIM_OC5_SetConfig+0xb8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d109      	bne.n	8002d8a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800

08002dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <TIM_OC6_SetConfig+0xb0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_OC6_SetConfig+0x74>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <TIM_OC6_SetConfig+0xb4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_OC6_SetConfig+0x74>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <TIM_OC6_SetConfig+0xb8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_OC6_SetConfig+0x74>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <TIM_OC6_SetConfig+0xbc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d109      	bne.n	8002e48 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800

08002e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e04f      	b.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d004      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10c      	bne.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40014000 	.word	0x40014000

08002f4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d178      	bne.n	8003056 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_UART_Transmit+0x24>
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e071      	b.n	8003058 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f82:	f7fd fc4d 	bl	8000820 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x68>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fbc:	e030      	b.n	8003020 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fac9 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e03c      	b.n	8003058 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e008      	b.n	800300e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b292      	uxth	r2, r2
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1c8      	bne.n	8002fbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	2140      	movs	r1, #64	; 0x40
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa92 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e005      	b.n	8003058 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8a      	ldr	r3, [pc, #552]	; (80032b4 <UART_SetConfig+0x254>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a78      	ldr	r2, [pc, #480]	; (80032b8 <UART_SetConfig+0x258>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0xbe>
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <UART_SetConfig+0x25c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d817      	bhi.n	8003118 <UART_SetConfig+0xb8>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x90>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003113 	.word	0x08003113
 80030fc:	08003107 	.word	0x08003107
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e01d      	b.n	8003142 <UART_SetConfig+0xe2>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e01a      	b.n	8003142 <UART_SetConfig+0xe2>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e017      	b.n	8003142 <UART_SetConfig+0xe2>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e014      	b.n	8003142 <UART_SetConfig+0xe2>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e011      	b.n	8003142 <UART_SetConfig+0xe2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x260>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d102      	bne.n	800312e <UART_SetConfig+0xce>
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0xe2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <UART_SetConfig+0x264>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <UART_SetConfig+0xde>
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e001      	b.n	8003142 <UART_SetConfig+0xe2>
 800313e:	2310      	movs	r3, #16
 8003140:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314a:	d15a      	bne.n	8003202 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800314c:	7ffb      	ldrb	r3, [r7, #31]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d827      	bhi.n	80031a2 <UART_SetConfig+0x142>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0xf8>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7ff f838 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003180:	61b8      	str	r0, [r7, #24]
        break;
 8003182:	e013      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7ff f856 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003188:	61b8      	str	r0, [r7, #24]
        break;
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <UART_SetConfig+0x268>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e00c      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe ffb7 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8003196:	61b8      	str	r0, [r7, #24]
        break;
 8003198:	e008      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e004      	b.n	80031ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77bb      	strb	r3, [r7, #30]
        break;
 80031aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d074      	beq.n	800329c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	005a      	lsls	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d916      	bls.n	80031fc <UART_SetConfig+0x19c>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d212      	bcs.n	80031fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	89fa      	ldrh	r2, [r7, #14]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e04f      	b.n	800329c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	77bb      	strb	r3, [r7, #30]
 8003200:	e04c      	b.n	800329c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003202:	7ffb      	ldrb	r3, [r7, #31]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d828      	bhi.n	800325a <UART_SetConfig+0x1fa>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <UART_SetConfig+0x1b0>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003235 	.word	0x08003235
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003245 	.word	0x08003245
 800321c:	0800325b 	.word	0x0800325b
 8003220:	0800324b 	.word	0x0800324b
 8003224:	0800325b 	.word	0x0800325b
 8003228:	0800325b 	.word	0x0800325b
 800322c:	0800325b 	.word	0x0800325b
 8003230:	08003253 	.word	0x08003253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7fe ffdc 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003238:	61b8      	str	r0, [r7, #24]
        break;
 800323a:	e013      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7fe fffa 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003240:	61b8      	str	r0, [r7, #24]
        break;
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <UART_SetConfig+0x268>)
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e00c      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7fe ff5b 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800324e:	61b8      	str	r0, [r7, #24]
        break;
 8003250:	e008      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e004      	b.n	8003264 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	77bb      	strb	r3, [r7, #30]
        break;
 8003262:	bf00      	nop
    }

    if (pclk != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	085a      	lsrs	r2, r3, #1
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d909      	bls.n	8003298 <UART_SetConfig+0x238>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d205      	bcs.n	8003298 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e001      	b.n	800329c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	efff69f3 	.word	0xefff69f3
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40004800 	.word	0x40004800
 80032c8:	007a1200 	.word	0x007a1200

080032cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d10a      	bne.n	80033e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b098      	sub	sp, #96	; 0x60
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003420:	f7fd f9fe 	bl	8000820 <HAL_GetTick>
 8003424:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d12e      	bne.n	8003492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f88c 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d021      	beq.n	8003492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	653b      	str	r3, [r7, #80]	; 0x50
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e6      	bne.n	800344e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e062      	b.n	8003558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d149      	bne.n	8003534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f856 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03c      	beq.n	8003534 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	623b      	str	r3, [r7, #32]
   return(result);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
 80034da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e6      	bne.n	80034ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3308      	adds	r3, #8
 80034f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3308      	adds	r3, #8
 800350a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	69b9      	ldr	r1, [r7, #24]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	617b      	str	r3, [r7, #20]
   return(result);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e5      	bne.n	80034ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e011      	b.n	8003558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3758      	adds	r7, #88	; 0x58
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	e049      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003578:	d045      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fd f951 	bl	8000820 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <UART_WaitOnFlagUntilTimeout+0x30>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e048      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d031      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d110      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f838 	bl	800362e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2208      	movs	r2, #8
 80035c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e029      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	d111      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f81e 	bl	800362e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e00f      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d0a6      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362e:	b480      	push	{r7}
 8003630:	b095      	sub	sp, #84	; 0x54
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	643b      	str	r3, [r7, #64]	; 0x40
 8003656:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d118      	bne.n	80036d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0310 	bic.w	r3, r3, #16
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6979      	ldr	r1, [r7, #20]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	613b      	str	r3, [r7, #16]
   return(result);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e6      	bne.n	80036a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036ea:	bf00      	nop
 80036ec:	3754      	adds	r7, #84	; 0x54
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e056      	b.n	80037bc <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7fc ff98 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff fc90 	bl	8003060 <UART_SetConfig>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e038      	b.n	80037bc <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fdba 	bl	80032cc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003766:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	055b      	lsls	r3, r3, #21
 8003780:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003796:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff fe2b 	bl	8003410 <UART_CheckIdleState>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4d0d      	ldr	r5, [pc, #52]	; (800380c <__libc_init_array+0x38>)
 80037d8:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037da:	1b64      	subs	r4, r4, r5
 80037dc:	10a4      	asrs	r4, r4, #2
 80037de:	2600      	movs	r6, #0
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	4d0b      	ldr	r5, [pc, #44]	; (8003814 <__libc_init_array+0x40>)
 80037e6:	4c0c      	ldr	r4, [pc, #48]	; (8003818 <__libc_init_array+0x44>)
 80037e8:	f000 f818 	bl	800381c <_init>
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	2600      	movs	r6, #0
 80037f2:	42a6      	cmp	r6, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fc:	4798      	blx	r3
 80037fe:	3601      	adds	r6, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f855 3b04 	ldr.w	r3, [r5], #4
 8003806:	4798      	blx	r3
 8003808:	3601      	adds	r6, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	0800386c 	.word	0x0800386c
 8003810:	0800386c 	.word	0x0800386c
 8003814:	0800386c 	.word	0x0800386c
 8003818:	08003870 	.word	0x08003870

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
